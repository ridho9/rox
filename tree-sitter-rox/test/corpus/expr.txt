===
Basic expr
===

print true;
print false;
print nil;
print 1;
print 1.2;
print _a;
print _b;
print abcd;
print "";
print "asdsdsd";
print "asd\"asdasd";
print (1);
print !true;

---

(program
  (stmt
    (print_stmt
      (expr
        (primary
          (bool)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (bool)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (nil)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (number)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (number)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (ident)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (ident)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (ident)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (string)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (string)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (string)))))
  (stmt
    (print_stmt
      (expr
        (primary
          (expr
            (primary
              (number)))))))
  (stmt
    (print_stmt
      (expr
        (unary_expr
          (expr
            (primary
              (bool))))))))

====
Expr Precedence
====

print -5;
print 1+2;
print 1+2*3;
print 1*2+3;
print 1+-2;
print 1+2>2*2>=5;
print 1+2==3*4;

---

(program
  (stmt
    (print_stmt
      (expr
        (unary_expr
          (expr
            (primary
              (number)))))))
  (stmt
    (print_stmt
      (expr
        (binary_expr
          (expr
            (primary
              (number)))
          (expr
            (primary
              (number)))))))
  (stmt
    (print_stmt
      (expr
        (binary_expr
          (expr
            (primary
              (number)))
          (expr
            (binary_expr
              (expr
                (primary
                  (number)))
              (expr
                (primary
                  (number)))))))))
  (stmt
    (print_stmt
      (expr
        (binary_expr
          (expr
            (binary_expr
              (expr
                (primary
                  (number)))
              (expr
                (primary
                  (number)))))
          (expr
            (primary
              (number)))))))
  (stmt
    (print_stmt
      (expr
        (binary_expr
          (expr
            (primary
              (number)))
          (expr
            (unary_expr
              (expr
                (primary
                  (number)))))))))
  (stmt
    (print_stmt
      (expr
        (binary_expr
          (expr
            (binary_expr
              (expr
                (binary_expr
                  (expr
                    (primary
                      (number)))
                  (expr
                    (primary
                      (number)))))
              (expr
                (binary_expr
                  (expr
                    (primary
                      (number)))
                  (expr
                    (primary
                      (number)))))))
          (expr
            (primary
              (number)))))))
  (stmt
    (print_stmt
      (expr
        (binary_expr
          (expr
            (binary_expr
              (expr
                (primary
                  (number)))
              (expr
                (primary
                  (number)))))
          (expr
            (binary_expr
              (expr
                (primary
                  (number)))
              (expr
                (primary
                  (number))))))))))
